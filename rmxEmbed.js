/* rmxEmbed.svelte generated by Svelte v3.12.1 */
import {
	SvelteElement,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	flush,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "https://cdn.jsdelivr.net/npm/svelte@3.19.1/internal/index.min.js";
import "https://staging.remixlabs.com/staging/runtime/assets/embed.js";
import { createEventDispatcher, onMount, onDestroy } from "https://cdn.jsdelivr.net/npm/svelte@3.19.1/index.min.js";

function create_fragment(ctx) {
	var div1, div0, t1, link0, t2, link1;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "xxxx";
			t1 = space();
			link0 = element("link");
			t2 = space();
			link1 = element("link");
			this.c = noop;
			attr(div1, "class", "embedContainer");
			attr(link0, "href", "../dist-embed/runtime.css");
			attr(link0, "rel", "stylesheet");
			attr(link0, "type", "text/css");
			attr(link1, "href", "https://cdn.materialdesignicons.com/4.5.95/css/materialdesignicons.min.css");
			attr(link1, "rel", "stylesheet");
			attr(link1, "type", "text/css");
		},

		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			ctx.div0_binding(div0);
			ctx.div1_binding(div1);
			insert(target, t1, anchor);
			insert(target, link0, anchor);
			insert(target, t2, anchor);
			insert(target, link1, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div1);
			}

			ctx.div0_binding(null);
			ctx.div1_binding(null);

			if (detaching) {
				detach(t1);
				detach(link0);
				detach(t2);
				detach(link1);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

	const dispatch = createEventDispatcher();

	onDestroy(() => {
        console.log("rmxEmbed Destroyed");
	});

	onMount(() => {
        mounted = true;
        setTimeout(function() {
            fullOpacity();
        }, 5000);
	});

    let { amp = null, token = null, app = null, screen = null, params = null } = $$props;

    let embedContainer = null;
    let embedTarget = null;

    let mounted = false;
    let loaded = false;
    
    let { screenInterface = null, flags = {}, eventparams = [] } = $$props;

    function fullOpacity() {
        $$invalidate('embedContainer', embedContainer.style.opacity = 1.0, embedContainer);
    }

    function load() {
        if (mounted && !loaded) {
            $$invalidate('screenInterface', screenInterface = rmx_init({
                flags: flags,
                node: embedTarget,
                onEvent: getOnEvent()
            }));
            loaded = true;
        }
    }

    function getOnEvent() {
        return {
            dimensions: (args, coords, cb) => {
                if (embedContainer) {
                    var height = args.height;
                    var width = args.width;
                    if (height) {
                        $$invalidate('embedContainer', embedContainer.style.height = height + "px", embedContainer);
                    }
                    if (width) {
                        $$invalidate('embedContainer', embedContainer.style.width = width + "px", embedContainer);
                    }
                    fullOpacity();
                }
            },
            generic: (args, coords, cb) => {
                var payload = args;
                if (payload) {
                    if (payload.length) {
                        payload[0].timestamp = 
                        payload[0].timestamp = new Date().getTime();
                    } else {
                        payload.timestamp = new Date().getTime();
                    }
                    event("generic", payload);
                }
            }
        };
    }

    function handleEvent(eventActions) {
        if (eventActions && eventActions.forEach) {
            eventActions.forEach(function(params) {
                switch(params.command) {
                    case "invokeAction":
                        if (screenInterface && params.invokeTarget) {
                            screenInterface.invokeAction(params.invokeTarget);
                        }
                        break;
                    case "setCellValue":
                        if (screenInterface && params.targetCell) {
                            screenInterface.setCellValue(params.targetCell, params.cellValue);
                        }
						break;
						
					case "getCellValue":
						if (screenInterface && params.targetCell) {
							screenInterface.getCellValue(params.targetCell);
						}
						break;
                }
            })
        }
    }


	function event(eventName, payload) {
        dispatch(eventName, payload);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('embedTarget', embedTarget = $$value);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('embedContainer', embedContainer = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('amp' in $$props) $$invalidate('amp', amp = $$props.amp);
		if ('token' in $$props) $$invalidate('token', token = $$props.token);
		if ('app' in $$props) $$invalidate('app', app = $$props.app);
		if ('screen' in $$props) $$invalidate('screen', screen = $$props.screen);
		if ('params' in $$props) $$invalidate('params', params = $$props.params);
		if ('screenInterface' in $$props) $$invalidate('screenInterface', screenInterface = $$props.screenInterface);
		if ('flags' in $$props) $$invalidate('flags', flags = $$props.flags);
		if ('eventparams' in $$props) $$invalidate('eventparams', eventparams = $$props.eventparams);
	};

	$$self.$$.update = ($$dirty = { amp: 1, token: 1, app: 1, screen: 1, params: 1, flags: 1, eventparams: 1 }) => {
		if ($$dirty.amp) { if (amp) {
                $$invalidate('flags', flags.ampPrefix = amp, flags);
        	} }
		if ($$dirty.token) { if (token) {
                $$invalidate('flags', flags.ampToken = token, flags);
        	} }
		if ($$dirty.app) { if (app) {
                $$invalidate('flags', flags.appName = app, flags);
        	} }
		if ($$dirty.screen) { if (screen) {
                $$invalidate('flags', flags.screenName = screen, flags);
        	} }
		if ($$dirty.params) { if (params) {
                $$invalidate('flags', flags.params = params, flags);
        	} }
		if ($$dirty.flags) { if (flags) {
                if (flags.split) {
                    try {
                        $$invalidate('flags', flags = JSON.parse(flags));
                    } catch(e) {};
                }
                if (flags.ampPrefix && flags.appName  && flags.screenName  && flags.params) {
                    load();
                }
        	} }
		if ($$dirty.eventparams) { if (eventparams) {
                if (eventparams.split) {
                    try {
                        $$invalidate('eventparams', eventparams = JSON.parse(eventparams));
                    } catch(e) {};
                }
                handleEvent(eventparams.actions);
        	} }
	};

	return {
		amp,
		token,
		app,
		screen,
		params,
		embedContainer,
		embedTarget,
		screenInterface,
		flags,
		eventparams,
		div0_binding,
		div1_binding
	};
}

class rmxEmbed extends SvelteElement {
	constructor(options) {
		super();

		this.shadowRoot.innerHTML = `<style>.embedContainer{width:100px;height:100px;overflow:visible;opacity:0.01}</style>`;

		init(this, { target: this.shadowRoot }, instance, create_fragment, safe_not_equal, ["amp", "token", "app", "screen", "params", "screenInterface", "flags", "eventparams"]);

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["amp","token","app","screen","params","screenInterface","flags","eventparams"];
	}

	get amp() {
		return this.$$.ctx.amp;
	}

	set amp(amp) {
		this.$set({ amp });
		flush();
	}

	get token() {
		return this.$$.ctx.token;
	}

	set token(token) {
		this.$set({ token });
		flush();
	}

	get app() {
		return this.$$.ctx.app;
	}

	set app(app) {
		this.$set({ app });
		flush();
	}

	get screen() {
		return this.$$.ctx.screen;
	}

	set screen(screen) {
		this.$set({ screen });
		flush();
	}

	get params() {
		return this.$$.ctx.params;
	}

	set params(params) {
		this.$set({ params });
		flush();
	}

	get screenInterface() {
		return this.$$.ctx.screenInterface;
	}

	set screenInterface(screenInterface) {
		this.$set({ screenInterface });
		flush();
	}

	get flags() {
		return this.$$.ctx.flags;
	}

	set flags(flags) {
		this.$set({ flags });
		flush();
	}

	get eventparams() {
		return this.$$.ctx.eventparams;
	}

	set eventparams(eventparams) {
		this.$set({ eventparams });
		flush();
	}
}

export {rmxEmbed};
window.customElements.define('rmx-embed', rmxEmbed);